  p1 <- as.character(expr)
p1
  cmd <- paste('print(diff(', p1, ',', var, ',', as.character(degree), '));')
cmd
maxima_bin="/usr/local/bin/maxima"
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin)
cmd2
system(cmd2)
system(cmd2, intern=TRUE)
system(cmd2, intern=TRUE) -> zz
zz[7]
deparse(zz[7])
eval(zz[7])
expression(zz[7])
expression(eval(zz[7]))
eval(zz[7]))
eval(zz[7])
as.expression(eval(zz[7])
)
deparse(zz[7])
eval(deparse(zz[7]))
as.raw(zz[7])
as.raw(eval(zz[7]))
zz[7]
as.expression(zz[7])
eval(as.expression(zz[7])
as.expression(zz[7])
)
zz[7]
gsub('"', '', zz[7])
expression('6 * x ')
eval(expression('6 * x ')
)
?eval
as.raw("6 * x")
as.function("6 * x")
as.call("6 * x")
?expression
?call
do.call('6*3')
?substitute
?sQuote
?Quotes
sQuote('3 * x')
dQuote('3 * x')
Quote('3 * x')
substitute('3 * x')
eval(substitute('3 * x'))
evalq('3 * 6')
expr
?expr
?expression
expression('3 * 6')
eval(expression('3 * 6'))
eval(as.expression'3 * 6'))
?as.expression
as.symbol('3 * 6')
eval(as.symbol('3 * 6'))
evalq(expression('3 * 6'))
?dQuote
eval("3 * x")
("3 * x")
parse(text='3 * x')
eval(parse(text='3 * x')
)
(parse(text='3 * 7'))
)
f <- function('x') {}
f <- function(x) {}
body(f)
body(f) <- parse(text='3 * x')
f(3)
f(13)
  p1 <- as.character(expr);
  cmd <- paste('displayd2:false; stardisp:true; print(diff(', p1, ',', var, ',', as.character(degree), '));');
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin);
  res <- system(cmd2, intern=TRUE);
res
res[9]
  f <- eval(substitute(function(v) {}, list(v=var)));
mDeriv <- function(expr, var='x', degree=1) {
  p1 <- as.character(expr);
  cmd <- paste('displayd2:false; stardisp:true; print(diff(', p1, ',', var, ',', as.character(degree), '));');
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  f <- eval(substitute(function(v) {}, list(v=var)));
  body(f) <- parse(text=res);
  return(f);
}
mDeriv('3 x ^2 + x - 1')
res
  res <- system(cmd2, intern=TRUE)[9];
res
parse(text=res)
body(f) <- parse(text=res)
f
?substitute
var
  f <- eval(substitute(function(v) {}, list(v=var)));
f
?substitute
  f <- eval(substitute(function(v), list(v=var)));
  f <- eval(substitute(function(v){}, list(v=var)));
f
var
substitute(v, list(v=var))
substitute(function(v), list(v=var))
substitute(function(v){}, list(v=var))
args(f)
args(f)
args(f)[1]
args(f)[[1]]
?body
alist(f)
?body
?args
formals(f)
formals(f)[[1]]
formals(f)
formals(f) <- list(var)
list(var=c())
list(eval(var))
formals
?formals
alist(var=)
alist(eval(var)=)
alist(eval(substitute(v, list(v=var))=)
alist(eval(substitute(v, list(v=var)))
)
alist(vars)
alist(eval(vars)
)
eval(vars)
eval(var)
alist(eval(var)
)
?alist
    is.pairlist(.Options)  # a user-level pairlist
     ## "pre-allocate" an empty list of length 5
     vector("list", 5)
     # Argument lists
     f <- function() x
     # Note the specification of a "..." argument:
     formals(f) <- al <- alist(x=, y=2+3, ...=)
     f
     al
f
al
f
al
class(al)
zzz <- list()
names(zzz)
length(zzz)
length(zzz) <- 1
zzz
names(zzz)
names(zzz) <- var
zz
zzz
formals(f) <- zzz
f
f$args
f$body
list(f)
f <- function()
 
f <- function() {}
f
args(f)
args(f) <- var
args(f)
Arg(f)
formals(f)
formals(f) <- var
formals(f) <- list(var)
list(var)
alist()
?formals
?args
args(c)
res
formals(f)
formals(f) <- zzz
f
  body(f) <- parse(text=res);
f(3)
f
mDeriv <- function(expr, var='x', degree=1) {
  p1 <- as.character(expr);
  cmd <- paste('displayd2:false; stardisp:true; print(diff(', p1, ',', var, ',', as.character(degree), '));');
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  f <- function();
  args <- list(length=1);
  names(args) <- var
  body(f) <- parse(text=res);
  return(f);
}
mDeriv <- function(expr, var='x', degree=1) {
  p1 <- as.character(expr);
  cmd <- paste('displayd2:false; stardisp:true; print(diff(', p1, ',', var, ',', as.character(degree), '));');
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  f <- function() {};
  args <- list(length=1);
  names(args) <- var
  body(f) <- parse(text=res);
  return(f);
}
mDeriv('3 * x^2 + x^3')
expr = '3 * x^2 + x^3'
  p1 <- as.character(expr);
  cmd <- paste('displayd2:false; stardisp:true; print(diff(', p1, ',', var, ',', as.character(degree), '));');
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
res
  res <- system(cmd2, intern=TRUE)
res
  res <- system(cmd2, intern=TRUE)[10]
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin);
mDeriv <- function(expr, var='x', degree=1) {
  p1 <- as.character(expr);
  cmd <- paste('displayd2:false; stardisp:true; print(diff(', p1, ',', var, ',', as.character(degree), '));');
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[10];
  f <- function() {};
  args <- list(length=1);
  names(args) <- var
  body(f) <- parse(text=res);
  return(f);
}
mDeriv('3 * x^2 + x^3')
mDeriv('3 * x^2 + x^3') -> g
g(3)
g(x=3)
  p1 <- as.character(expr);
  cmd <- paste('displayd2:false; stardisp:true; print(diff(', p1, ',', var, ',', as.character(degree), '));');
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[10];
  f <- function() {};
  args <- list(length=1);
  names(args) <- var
  body(f) <- parse(text=res);
args
f
formals(f) <- args
mDeriv <- function(expr, var='x', degree=1) {
  p1 <- as.character(expr);
  cmd <- paste('displayd2:false; stardisp:true; print(diff(', p1, ',', var, ',', as.character(degree), '));');
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[10];
  f <- function() {};
  args <- list(length=1);
  names(args) <- var;
  formals(f) <- args;
  body(f) <- parse(text=res);
  return(f);
}
mDeriv('3 * x^2 + x^3') -> g
g(3)
g
mDeriv <- function(expr, var='x', degree=1) {
  p1 <- as.character(expr);
  cmd <- paste('display2d:false; stardisp:true; print(diff(', p1, ',', var, ',', as.character(degree), '));');
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[10];
  f <- function() {};
  args <- list(length=1);
  names(args) <- var;
  formals(f) <- args;
  body(f) <- parse(text=res);
  return(f);
}
  p1 <- as.character(expr);
  cmd <- paste('display2d:false; stardisp:true; print(diff(', p1, ',', var, ',', as.character(degree), '));');
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)
res
mDeriv <- function(expr, var='x', degree=1) {
  p1 <- as.character(expr);
  cmd <- paste('display2d:false; stardisp:true; print(diff(', p1, ',', var, ',', as.character(degree), '));');
  cmd2 <- paste('echo "', cmd, '" | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  f <- function() {};
  args <- list(length=1);
  names(args) <- var;
  formals(f) <- args;
  body(f) <- parse(text=res);
  return(f);
}
mDeriv('3 * x^2 + x^3') -> g
g
g(3)
g
maxima_bin="ssh biostat@apalmerlab1.palmerlab.org"
mDeriv <- function(expr, var='x', degree=1) {
  p1 <- as.character(expr);
  cmd <- paste('display2d:false; stardisp:true; print(diff(', p1, ',', var, 
               ',', as.character(degree), '));');
  cmd2 <- paste("echo 'echo ", cmd, '" | ', "maxima'", ' | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  f <- function() {};
  args <- list(length=1);
  names(args) <- var;
  formals(f) <- args;
  body(f) <- parse(text=res);
  return(f);
}
mDeriv('3 * x^2 + x^3') -> g
  p1 <- as.character(expr);
  cmd <- paste('display2d:false; stardisp:true; print(diff(', p1, ',', var, 
               ',', as.character(degree), '));');
  cmd2 <- paste("echo 'echo ", cmd, '" | ', "maxima'", ' | ', maxima_bin);
cmd2
  cmd2 <- paste("echo 'echo \"", cmd, '" | ', "maxima'", ' | ', maxima_bin);
cmd2
  res <- system(cmd2, intern=TRUE)[9];
res
mDeriv <- function(expr, var='x', degree=1) {
  p1 <- as.character(expr);
  cmd <- paste('display2d:false; stardisp:true; print(diff(', p1, ',', var, 
               ',', as.character(degree), '));');
  cmd2 <- paste("echo 'echo \"", cmd, '" | ', "maxima'", ' | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  f <- function() {};
  args <- list(length=1);
  names(args) <- var;
  formals(f) <- args;
  body(f) <- parse(text=res);
  return(f);
}
mDeriv('3 * x^2 + x^3') -> g
g
g(3)
mIntegr <- function(expr, var='x', degree=1) {
  p1 <- as.character(expr);
  cmd <- paste('display2d:false; stardisp:true; print(integrate(', p1, ',',
               var, ',', as.character(degree), '));');
  cmd2 <- paste("echo 'echo \"", cmd, '" | ', "maxima'", ' | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  f <- function() {};
  args <- list(length=1);
  names(args) <- var;
  formals(f) <- args;
  body(f) <- parse(text=res);
  return(f);
}
mIntegr('3* x')
mIntegr('3* x')(3)
p1 <- '3x^2 = 1'
  cmd <- paste('display2d:false; stardisp:true; print(solve(', p1, ',',
               var, ',', as.character(degree), '));');
  cmd2 <- paste("echo 'echo \"", cmd, '" | ', "maxima'", ' | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  res <- strsplit(gsub(x, '', gsub('[=|\\[|\\]]', '', res)))[[1]];
res
cmd2
  cmd <- paste('display2d:false; stardisp:true; print(solve(', p1, ',',
               var, ',));');
  cmd2 <- paste("echo 'echo \"", cmd, '" | ', "maxima'", ' | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)
res
p1
  cmd <- paste('display2d:false; stardisp:true; print(solve(', p1,'));');
cmd
  cmd2 <- paste("echo 'echo \"", cmd, '" | ', "maxima'", ' | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)
res
p1 <- '3*x^2 = 1'
  cmd <- paste('display2d:false; stardisp:true; print(solve(', p1,'));');
  cmd2 <- paste("echo 'echo \"", cmd, '" | ', "maxima'", ' | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)
res
  p1 <- as.character(expr);
  cmd <- paste('display2d:false; stardisp:true; print(solve(', p1, ',', var, '));');
  cmd2 <- paste("echo 'echo \"", cmd, '" | ', "maxima'", ' | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  res <- strsplit(gsub(x, '', gsub('[=|\\[|\\]]', '', res)))[[1]];
res
  res <- strsplit(gsub(var, '', gsub('[=|\\[|\\]]', '', res)))[[1]];
var
gsub('[=|\\[|\\]]', '', res)
gsub('[=|\[|\]]', '', res)
gsub('[=]', '', res)
gsub('[=|\\[]', '', res)
gsub('[=|\\[|\\]]', '', res)
gsub('[=|\\]]', '', res)
gsub('[=|]', '', res)
gsub('[=|\\[]', '', res)
gsub('[=|\\[|]]', '', res)
gsub('[=|\\[|\\]]', '', res)
gsub('[=|\\[]', '', res)
gsub('\\]', '', gsub('[=|\\[]', '', res)
)
gsub(var, '', gsub('\\]', '', gsub('[=|\\[]', '', res)))
strsplit(gsub(var, '', gsub('\\]', '', gsub('[=|\\[]', '', res))), ', ')
strsplit(gsub(var, '', gsub('\\]', '', gsub('[=|\\[]', '', res))), ', ')[[1]]
strsplit(gsub(var, '', gsub('\\]', '', gsub('[=|\\[]', '', res))), ', ')[[1]] -> h
parse(h[1])
parse(text=h[1])
eval(parse(text=h[1]))
mSolve <- function(expr, var='x') {
  p1 <- as.character(expr);
  cmd <- paste('display2d:false; stardisp:true; print(solve(', p1, ',', var, '));');
  cmd2 <- paste("echo 'echo \"", cmd, '" | ', "maxima'", ' | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  res <- strsplit(gsub('\\]', '', gsub(var, '', gsub('[=|\\[]', '', res)), 
                  ', ')[[1]];
  solutions <- c();
  for (ii in res) {
    solutions <- c(solutions, eval(parse(text=res[ii])));
  }
  return(solutions);
}
mSolve <- function(expr, var='x') {
  p1 <- as.character(expr);
  cmd <- paste('display2d:false; stardisp:true; print(solve(', p1, ',', var, '));');
  cmd2 <- paste("echo 'echo \"", cmd, '" | ', "maxima'", ' | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  res <- strsplit(gsub('\\]', '', gsub(var, '', gsub('[=|\\[]', '', res))), 
                  ', ')[[1]]
  solutions <- c();
  for (ii in res) {
    solutions <- c(solutions, eval(parse(text=res[ii])));
  }
  return(solutions);
}
mSolve(x^2 = 1)
mSolve('x^2 = 1')
p1 <- 'x^2 = 1'
  p1 <- as.character(expr);
  cmd <- paste('display2d:false; stardisp:true; print(solve(', p1, ',', var, '));');
  cmd2 <- paste("echo 'echo \"", cmd, '" | ', "maxima'", ' | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  res <- strsplit(gsub('\\]', '', gsub(var, '', gsub('[=|\\[]', '', res))), 
                  ', ')[[1]]
  solutions <- c();
res
eval(parse(text=res[ii]))
eval(parse(text=res[1]))
  solutions <- c();
  for (ii in res) {
    solutions <- c(solutions, eval(parse(text=ii)));
  }
solutions
mSolve <- function(expr, var='x') {
  p1 <- as.character(expr);
  cmd <- paste('display2d:false; stardisp:true; print(solve(', p1, ',', var, '));');
  cmd2 <- paste("echo 'echo \"", cmd, '" | ', "maxima'", ' | ', maxima_bin);
  res <- system(cmd2, intern=TRUE)[9];
  res <- strsplit(gsub('\\]', '', gsub(var, '', gsub('[=|\\[]', '', res))), 
                  ', ')[[1]]
  solutions <- c();
  for (ii in res) {
    solutions <- c(solutions, eval(parse(text=ii)));
  }
  return(solutions);
}
mSolve('x^2 = 1')
ls()
quartz()
f <- function(x) 1-exp(-x)
f(3)
curve(f, from=0.01, to=10) 
curve(1-exp(-x), from=0.01, to=10) 
quit()
ls()
rm(list=ls())
ls(all.names=TRUE)
source('../maxima_utilities.R')
.createRserveEnv()
mDeriv(x^2 + x * y + y^2, 'x')
library(mvbutils)
mDeriv
mIntegr
~
 x
source('chapter2/maxima_utilities.R')
ls()
ls(all.names=TRUE)
normExpArg
docskel(normExpArg)
?docskel
add.flatdoc.to(normExpArg)
fixr(normExpArg)
?docskel
add.flatdoc.to( normExpArg)
normExpArg
normExpArg
add.flatdoc.to( normExpArg)
attr(normExpArg, 'doc')
add.flatdoc.to( normExpArg)
attr(normExpArg, 'doc')
?add.flatdoc.to
flatdoc
docskel
ls
ls()
ls(all.names=TRUE)
mIntegr
example(docskel)
myfun
mDeriv<-add.flatdoc.to(mDeriv)
mDeriv
fixr( mDeriv)
mDeriv
attr(mDeriv, 'doc')
?source.mvb
?doc2Rd
save.image()
quit()
