# Elizabeth Allen
# Chapter 0


## QUESTION 1a##
################

x0 <- 0
x1 <- 1
k <- 6
while(x1 <= k) {      
  newX1 <- x0 + x1      
  x0 <- x1              
  x1 <- newX1           
}
if (k >= 0){
	x0
} else {
	cat("Fibonacci numbers start at 0")
}

## QUESTION 1b##
################

k <- 2
x <- -3
y <- 4

xdiff <- abs(k - x)
ydiff <- abs(k - y)

if (xdiff < ydiff) {
  cat("the x-value,",x, ", is closest to k =",k)
} else if (xdiff == ydiff) {
  cat("the x-value,",x, " and the y-value,",y,", are of equal distance from k =",k)
} else {
  cat("the y-value,",y,", is closest to k=",k)
}

## QUESTION 1c##
################

x0 <- 0
x1 <- 1
k <- 44

while(x1 <= k) {      
  newX1 <- x0 + x1      
  x0 <- x1              
  x1 <- newX1           
}
	
lower = abs(k - abs(x0))
upper = abs(k - abs(x1))

if (lower < upper) {
	cat(x0, "is the closest Fibonacci number to ",k)
} else if (lower == upper) {
	cat("The Fibonacci numbers",x0, "and ",x1, "are equally close to ",k)
} else { 
	cat(x1, "is the closest Fibonacci number to ",k)
}

## QUESTION 2a##
################

vector <- c(-3,0)
k <- -2
addedvector <- c(vector,k)
newvector <- c(0,0,0)

if (addedvector[3] < addedvector[2]){
	newvector[2] <- addedvector[3]
	newvector[3] <- addedvector[2]
	} else {
		newvector[2] <- addedvector[2]
		newvector[3] <- addedvector[3]
	}
	newvector[1] <- addedvector[1]
	
if (newvector[2] < newvector[1]){
	vector[1] <- newvector[2]
	vector[2] <- newvector[1]
	} else {
		vector[1] <- newvector[1]
		vector[2] <- newvector[2]
	}
	vector[3] <- newvector[3]
	
	cat("The original vector was ",addedvector)
	cat("The sorted vector is ",vector)

## QUESTION 2b##
################

vector <- c(1003,35)
nextvector <- c(1,2)
cat("The original vector was ",vector)

if (vector[2] < vector[1]){
	nextvector[1] <- vector[2]
	nextvector[2] <- vector[1]
	} else {
		nextvector[1] <- vector[1]
		nextvector[2] <- vector[2]
	}
	cat("The sorted vector is ",nextvector)
	
## QUESTION 2c##
################

vec <-c(-41,1,3,5,0,6,8,-35,14,12)

a <- min(vec)
vec1 <- vec[vec>min(vec)]
b <- min(vec1)
vec2 <- vec1[vec1>min(vec1)]
c <- min(vec2)
vec3 <- vec2[vec2>min(vec2)]
d <- min(vec3)
vec4 <- vec3[vec3>min(vec3)]
e <- min(vec4)
vec5 <- vec4[vec4>min(vec4)]
f <- min(vec5)
vec6 <- vec5[vec5>min(vec5)]
g <- min(vec6)
vec7 <- vec6[vec6>min(vec6)]
h <- min(vec7)
vec8 <- vec7[vec7>min(vec7)]
i <- min(vec8)
vec9 <- vec8[vec8>min(vec8)]
j <- min(vec9)
vec10 <- vec9[vec9>min(vec9)]

finalvec <-c(a,b,c,d,e,f,g,h,i,j)
cat("The original vector was ",vec)
cat("The sorted vector is ",finalvec)
	
## QUESTION 3##
################

##For the life of me, I couldn't figure this one out! I tried a bunch of ##different things, but nothing worked.